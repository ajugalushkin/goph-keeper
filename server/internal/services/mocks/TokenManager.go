// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	models "github.com/ajugalushkin/goph-keeper/server/internal/dto/models"
	mock "github.com/stretchr/testify/mock"
)

// TokenManager is an autogenerated mock type for the TokenManager type
type TokenManager struct {
	mock.Mock
}

// NewToken provides a mock function with given fields: user
func (_m *TokenManager) NewToken(user models.User) (string, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for NewToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(models.User) (string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(models.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: accessToken
func (_m *TokenManager) Verify(accessToken string) (bool, int64, error) {
	ret := _m.Called(accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 bool
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (bool, int64, error)); ok {
		return rf(accessToken)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(accessToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) int64); ok {
		r1 = rf(accessToken)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(accessToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewTokenManager creates a new instance of TokenManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenManager {
	mock := &TokenManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
