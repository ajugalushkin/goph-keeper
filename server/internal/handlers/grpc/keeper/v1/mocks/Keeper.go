// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/ajugalushkin/goph-keeper/server/internal/dto/models"
	mock "github.com/stretchr/testify/mock"
)

// Keeper is an autogenerated mock type for the Keeper type
type Keeper struct {
	mock.Mock
}

// CreateFile provides a mock function with given fields: ctx, file
func (_m *Keeper) CreateFile(ctx context.Context, file *models.File) (string, error) {
	ret := _m.Called(ctx, file)

	if len(ret) == 0 {
		panic("no return value specified for CreateFile")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.File) (string, error)); ok {
		return rf(ctx, file)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.File) string); ok {
		r0 = rf(ctx, file)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.File) error); ok {
		r1 = rf(ctx, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateItem provides a mock function with given fields: ctx, item
func (_m *Keeper) CreateItem(ctx context.Context, item *models.Item) (*models.Item, error) {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for CreateItem")
	}

	var r0 *models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Item) (*models.Item, error)); ok {
		return rf(ctx, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Item) *models.Item); ok {
		r0 = rf(ctx, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Item) error); ok {
		r1 = rf(ctx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteItem provides a mock function with given fields: ctx, item
func (_m *Keeper) DeleteItem(ctx context.Context, item *models.Item) error {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Item) error); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFile provides a mock function with given fields: ctx, name, userID
func (_m *Keeper) GetFile(ctx context.Context, name string, userID int64) (*models.File, error) {
	ret := _m.Called(ctx, name, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetFile")
	}

	var r0 *models.File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) (*models.File, error)); ok {
		return rf(ctx, name, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *models.File); ok {
		r0 = rf(ctx, name, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.File)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, name, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItem provides a mock function with given fields: ctx, name, userID
func (_m *Keeper) GetItem(ctx context.Context, name string, userID int64) (*models.Item, error) {
	ret := _m.Called(ctx, name, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetItem")
	}

	var r0 *models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) (*models.Item, error)); ok {
		return rf(ctx, name, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *models.Item); ok {
		r0 = rf(ctx, name, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, name, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListItems provides a mock function with given fields: ctx, userID
func (_m *Keeper) ListItems(ctx context.Context, userID int64) ([]*models.Item, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListItems")
	}

	var r0 []*models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*models.Item, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*models.Item); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateItem provides a mock function with given fields: ctx, item
func (_m *Keeper) UpdateItem(ctx context.Context, item *models.Item) (*models.Item, error) {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for UpdateItem")
	}

	var r0 *models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Item) (*models.Item, error)); ok {
		return rf(ctx, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Item) *models.Item); ok {
		r0 = rf(ctx, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Item) error); ok {
		r1 = rf(ctx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKeeper creates a new instance of Keeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *Keeper {
	mock := &Keeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
