// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/ajugalushkin/goph-keeper/gen/keeper/v1"
)

// KeepClient is an autogenerated mock type for the KeepClient type
type KeepClient struct {
	mock.Mock
}

// CreateItemStreamV1 provides a mock function with given fields: ctx, opts
func (_m *KeepClient) CreateItemStreamV1(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[v1.CreateItemStreamRequestV1, v1.CreateItemResponseV1], error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateItemStreamV1")
	}

	var r0 grpc.ClientStreamingClient[v1.CreateItemStreamRequestV1, v1.CreateItemResponseV1]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (grpc.ClientStreamingClient[v1.CreateItemStreamRequestV1, v1.CreateItemResponseV1], error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) grpc.ClientStreamingClient[v1.CreateItemStreamRequestV1, v1.CreateItemResponseV1]); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ClientStreamingClient[v1.CreateItemStreamRequestV1, v1.CreateItemResponseV1])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateItemV1 provides a mock function with given fields: ctx, in, opts
func (_m *KeepClient) CreateItemV1(ctx context.Context, in *v1.CreateItemRequestV1, opts ...grpc.CallOption) (*v1.CreateItemResponseV1, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateItemV1")
	}

	var r0 *v1.CreateItemResponseV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateItemRequestV1, ...grpc.CallOption) (*v1.CreateItemResponseV1, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateItemRequestV1, ...grpc.CallOption) *v1.CreateItemResponseV1); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CreateItemResponseV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.CreateItemRequestV1, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteItemV1 provides a mock function with given fields: ctx, in, opts
func (_m *KeepClient) DeleteItemV1(ctx context.Context, in *v1.DeleteItemRequestV1, opts ...grpc.CallOption) (*v1.DeleteItemResponseV1, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItemV1")
	}

	var r0 *v1.DeleteItemResponseV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DeleteItemRequestV1, ...grpc.CallOption) (*v1.DeleteItemResponseV1, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DeleteItemRequestV1, ...grpc.CallOption) *v1.DeleteItemResponseV1); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DeleteItemResponseV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.DeleteItemRequestV1, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemStreamV1 provides a mock function with given fields: ctx, in, opts
func (_m *KeepClient) GetItemStreamV1(ctx context.Context, in *v1.GetItemRequestV1, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v1.GetItemStreamResponseV1], error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetItemStreamV1")
	}

	var r0 grpc.ServerStreamingClient[v1.GetItemStreamResponseV1]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetItemRequestV1, ...grpc.CallOption) (grpc.ServerStreamingClient[v1.GetItemStreamResponseV1], error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetItemRequestV1, ...grpc.CallOption) grpc.ServerStreamingClient[v1.GetItemStreamResponseV1]); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[v1.GetItemStreamResponseV1])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.GetItemRequestV1, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemV1 provides a mock function with given fields: ctx, in, opts
func (_m *KeepClient) GetItemV1(ctx context.Context, in *v1.GetItemRequestV1, opts ...grpc.CallOption) (*v1.GetItemResponseV1, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetItemV1")
	}

	var r0 *v1.GetItemResponseV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetItemRequestV1, ...grpc.CallOption) (*v1.GetItemResponseV1, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetItemRequestV1, ...grpc.CallOption) *v1.GetItemResponseV1); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.GetItemResponseV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.GetItemRequestV1, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListItemsV1 provides a mock function with given fields: ctx, in, opts
func (_m *KeepClient) ListItemsV1(ctx context.Context, in *v1.ListItemsRequestV1, opts ...grpc.CallOption) (*v1.ListItemsResponseV1, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListItemsV1")
	}

	var r0 *v1.ListItemsResponseV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListItemsRequestV1, ...grpc.CallOption) (*v1.ListItemsResponseV1, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListItemsRequestV1, ...grpc.CallOption) *v1.ListItemsResponseV1); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListItemsResponseV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.ListItemsRequestV1, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateItemV1 provides a mock function with given fields: ctx, in, opts
func (_m *KeepClient) UpdateItemV1(ctx context.Context, in *v1.UpdateItemRequestV1, opts ...grpc.CallOption) (*v1.UpdateItemResponseV1, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateItemV1")
	}

	var r0 *v1.UpdateItemResponseV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.UpdateItemRequestV1, ...grpc.CallOption) (*v1.UpdateItemResponseV1, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.UpdateItemRequestV1, ...grpc.CallOption) *v1.UpdateItemResponseV1); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.UpdateItemResponseV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.UpdateItemRequestV1, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKeepClient creates a new instance of KeepClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeepClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeepClient {
	mock := &KeepClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
