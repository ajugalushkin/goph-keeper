// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	v1 "github.com/ajugalushkin/goph-keeper/gen/keeper/v1"
	mock "github.com/stretchr/testify/mock"
)

// KeeperClient is an autogenerated mock type for the KeeperClient type
type KeeperClient struct {
	mock.Mock
}

// CreateItem provides a mock function with given fields: ctx, item
func (_m *KeeperClient) CreateItem(ctx context.Context, item *v1.CreateItemRequestV1) (*v1.CreateItemResponseV1, error) {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for CreateItem")
	}

	var r0 *v1.CreateItemResponseV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateItemRequestV1) (*v1.CreateItemResponseV1, error)); ok {
		return rf(ctx, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateItemRequestV1) *v1.CreateItemResponseV1); ok {
		r0 = rf(ctx, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CreateItemResponseV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.CreateItemRequestV1) error); ok {
		r1 = rf(ctx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateItemStream provides a mock function with given fields: ctx, name, filePath
func (_m *KeeperClient) CreateItemStream(ctx context.Context, name string, filePath string) (*v1.CreateItemResponseV1, error) {
	ret := _m.Called(ctx, name, filePath)

	if len(ret) == 0 {
		panic("no return value specified for CreateItemStream")
	}

	var r0 *v1.CreateItemResponseV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1.CreateItemResponseV1, error)); ok {
		return rf(ctx, name, filePath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1.CreateItemResponseV1); ok {
		r0 = rf(ctx, name, filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CreateItemResponseV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteItem provides a mock function with given fields: ctx, item
func (_m *KeeperClient) DeleteItem(ctx context.Context, item *v1.DeleteItemRequestV1) (*v1.DeleteItemResponseV1, error) {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItem")
	}

	var r0 *v1.DeleteItemResponseV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DeleteItemRequestV1) (*v1.DeleteItemResponseV1, error)); ok {
		return rf(ctx, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DeleteItemRequestV1) *v1.DeleteItemResponseV1); ok {
		r0 = rf(ctx, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DeleteItemResponseV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.DeleteItemRequestV1) error); ok {
		r1 = rf(ctx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFile provides a mock function with given fields: ctx, name, path
func (_m *KeeperClient) GetFile(ctx context.Context, name string, path string) error {
	ret := _m.Called(ctx, name, path)

	if len(ret) == 0 {
		panic("no return value specified for GetFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, name, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetItem provides a mock function with given fields: ctx, item
func (_m *KeeperClient) GetItem(ctx context.Context, item *v1.GetItemRequestV1) (*v1.GetItemResponseV1, error) {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for GetItem")
	}

	var r0 *v1.GetItemResponseV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetItemRequestV1) (*v1.GetItemResponseV1, error)); ok {
		return rf(ctx, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetItemRequestV1) *v1.GetItemResponseV1); ok {
		r0 = rf(ctx, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.GetItemResponseV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.GetItemRequestV1) error); ok {
		r1 = rf(ctx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListItems provides a mock function with given fields: ctx, item
func (_m *KeeperClient) ListItems(ctx context.Context, item *v1.ListItemsRequestV1) (*v1.ListItemsResponseV1, error) {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for ListItems")
	}

	var r0 *v1.ListItemsResponseV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListItemsRequestV1) (*v1.ListItemsResponseV1, error)); ok {
		return rf(ctx, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListItemsRequestV1) *v1.ListItemsResponseV1); ok {
		r0 = rf(ctx, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListItemsResponseV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.ListItemsRequestV1) error); ok {
		r1 = rf(ctx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateItem provides a mock function with given fields: ctx, item
func (_m *KeeperClient) UpdateItem(ctx context.Context, item *v1.UpdateItemRequestV1) (*v1.UpdateItemResponseV1, error) {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for UpdateItem")
	}

	var r0 *v1.UpdateItemResponseV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.UpdateItemRequestV1) (*v1.UpdateItemResponseV1, error)); ok {
		return rf(ctx, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.UpdateItemRequestV1) *v1.UpdateItemResponseV1); ok {
		r0 = rf(ctx, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.UpdateItemResponseV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.UpdateItemRequestV1) error); ok {
		r1 = rf(ctx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKeeperClient creates a new instance of KeeperClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeeperClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeeperClient {
	mock := &KeeperClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
