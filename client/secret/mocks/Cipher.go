// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	vaulttypes "github.com/ajugalushkin/goph-keeper/client/vaulttypes"
)

// Cipher is an autogenerated mock type for the Cipher type
type Cipher struct {
	mock.Mock
}

// Decrypt provides a mock function with given fields: data
func (_m *Cipher) Decrypt(data []byte) (vaulttypes.Vault, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 vaulttypes.Vault
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (vaulttypes.Vault, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) vaulttypes.Vault); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vaulttypes.Vault)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encrypt provides a mock function with given fields: _a0
func (_m *Cipher) Encrypt(_a0 vaulttypes.Vault) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(vaulttypes.Vault) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(vaulttypes.Vault) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(vaulttypes.Vault) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCipher creates a new instance of Cipher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCipher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cipher {
	mock := &Cipher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
