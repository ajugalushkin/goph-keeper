// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: keeper/v1/keeper.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KeeperServiceV1_CreateItemV1_FullMethodName       = "/keeper.v1.KeeperServiceV1/CreateItemV1"
	KeeperServiceV1_CreateItemStreamV1_FullMethodName = "/keeper.v1.KeeperServiceV1/CreateItemStreamV1"
	KeeperServiceV1_UpdateItemV1_FullMethodName       = "/keeper.v1.KeeperServiceV1/UpdateItemV1"
	KeeperServiceV1_DeleteItemV1_FullMethodName       = "/keeper.v1.KeeperServiceV1/DeleteItemV1"
	KeeperServiceV1_GetItemV1_FullMethodName          = "/keeper.v1.KeeperServiceV1/GetItemV1"
	KeeperServiceV1_ListItemsV1_FullMethodName        = "/keeper.v1.KeeperServiceV1/ListItemsV1"
)

// KeeperServiceV1Client is the client API for KeeperServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeeperServiceV1Client interface {
	CreateItemV1(ctx context.Context, in *CreateItemRequestV1, opts ...grpc.CallOption) (*CreateItemResponseV1, error)
	CreateItemStreamV1(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateItemStreamRequestV1, CreateItemStreamResponseV1], error)
	UpdateItemV1(ctx context.Context, in *UpdateItemRequestV1, opts ...grpc.CallOption) (*UpdateItemResponseV1, error)
	DeleteItemV1(ctx context.Context, in *DeleteItemRequestV1, opts ...grpc.CallOption) (*DeleteItemResponseV1, error)
	GetItemV1(ctx context.Context, in *GetItemRequestV1, opts ...grpc.CallOption) (*GetItemResponseV1, error)
	ListItemsV1(ctx context.Context, in *ListItemsRequestV1, opts ...grpc.CallOption) (*ListItemsResponseV1, error)
}

type keeperServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewKeeperServiceV1Client(cc grpc.ClientConnInterface) KeeperServiceV1Client {
	return &keeperServiceV1Client{cc}
}

func (c *keeperServiceV1Client) CreateItemV1(ctx context.Context, in *CreateItemRequestV1, opts ...grpc.CallOption) (*CreateItemResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateItemResponseV1)
	err := c.cc.Invoke(ctx, KeeperServiceV1_CreateItemV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperServiceV1Client) CreateItemStreamV1(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateItemStreamRequestV1, CreateItemStreamResponseV1], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KeeperServiceV1_ServiceDesc.Streams[0], KeeperServiceV1_CreateItemStreamV1_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateItemStreamRequestV1, CreateItemStreamResponseV1]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KeeperServiceV1_CreateItemStreamV1Client = grpc.ClientStreamingClient[CreateItemStreamRequestV1, CreateItemStreamResponseV1]

func (c *keeperServiceV1Client) UpdateItemV1(ctx context.Context, in *UpdateItemRequestV1, opts ...grpc.CallOption) (*UpdateItemResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateItemResponseV1)
	err := c.cc.Invoke(ctx, KeeperServiceV1_UpdateItemV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperServiceV1Client) DeleteItemV1(ctx context.Context, in *DeleteItemRequestV1, opts ...grpc.CallOption) (*DeleteItemResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteItemResponseV1)
	err := c.cc.Invoke(ctx, KeeperServiceV1_DeleteItemV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperServiceV1Client) GetItemV1(ctx context.Context, in *GetItemRequestV1, opts ...grpc.CallOption) (*GetItemResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemResponseV1)
	err := c.cc.Invoke(ctx, KeeperServiceV1_GetItemV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperServiceV1Client) ListItemsV1(ctx context.Context, in *ListItemsRequestV1, opts ...grpc.CallOption) (*ListItemsResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListItemsResponseV1)
	err := c.cc.Invoke(ctx, KeeperServiceV1_ListItemsV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeeperServiceV1Server is the server API for KeeperServiceV1 service.
// All implementations must embed UnimplementedKeeperServiceV1Server
// for forward compatibility.
type KeeperServiceV1Server interface {
	CreateItemV1(context.Context, *CreateItemRequestV1) (*CreateItemResponseV1, error)
	CreateItemStreamV1(grpc.ClientStreamingServer[CreateItemStreamRequestV1, CreateItemStreamResponseV1]) error
	UpdateItemV1(context.Context, *UpdateItemRequestV1) (*UpdateItemResponseV1, error)
	DeleteItemV1(context.Context, *DeleteItemRequestV1) (*DeleteItemResponseV1, error)
	GetItemV1(context.Context, *GetItemRequestV1) (*GetItemResponseV1, error)
	ListItemsV1(context.Context, *ListItemsRequestV1) (*ListItemsResponseV1, error)
	mustEmbedUnimplementedKeeperServiceV1Server()
}

// UnimplementedKeeperServiceV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeeperServiceV1Server struct{}

func (UnimplementedKeeperServiceV1Server) CreateItemV1(context.Context, *CreateItemRequestV1) (*CreateItemResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemV1 not implemented")
}
func (UnimplementedKeeperServiceV1Server) CreateItemStreamV1(grpc.ClientStreamingServer[CreateItemStreamRequestV1, CreateItemStreamResponseV1]) error {
	return status.Errorf(codes.Unimplemented, "method CreateItemStreamV1 not implemented")
}
func (UnimplementedKeeperServiceV1Server) UpdateItemV1(context.Context, *UpdateItemRequestV1) (*UpdateItemResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItemV1 not implemented")
}
func (UnimplementedKeeperServiceV1Server) DeleteItemV1(context.Context, *DeleteItemRequestV1) (*DeleteItemResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItemV1 not implemented")
}
func (UnimplementedKeeperServiceV1Server) GetItemV1(context.Context, *GetItemRequestV1) (*GetItemResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemV1 not implemented")
}
func (UnimplementedKeeperServiceV1Server) ListItemsV1(context.Context, *ListItemsRequestV1) (*ListItemsResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItemsV1 not implemented")
}
func (UnimplementedKeeperServiceV1Server) mustEmbedUnimplementedKeeperServiceV1Server() {}
func (UnimplementedKeeperServiceV1Server) testEmbeddedByValue()                         {}

// UnsafeKeeperServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeeperServiceV1Server will
// result in compilation errors.
type UnsafeKeeperServiceV1Server interface {
	mustEmbedUnimplementedKeeperServiceV1Server()
}

func RegisterKeeperServiceV1Server(s grpc.ServiceRegistrar, srv KeeperServiceV1Server) {
	// If the following call pancis, it indicates UnimplementedKeeperServiceV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KeeperServiceV1_ServiceDesc, srv)
}

func _KeeperServiceV1_CreateItemV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServiceV1Server).CreateItemV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeeperServiceV1_CreateItemV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServiceV1Server).CreateItemV1(ctx, req.(*CreateItemRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeeperServiceV1_CreateItemStreamV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KeeperServiceV1Server).CreateItemStreamV1(&grpc.GenericServerStream[CreateItemStreamRequestV1, CreateItemStreamResponseV1]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KeeperServiceV1_CreateItemStreamV1Server = grpc.ClientStreamingServer[CreateItemStreamRequestV1, CreateItemStreamResponseV1]

func _KeeperServiceV1_UpdateItemV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServiceV1Server).UpdateItemV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeeperServiceV1_UpdateItemV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServiceV1Server).UpdateItemV1(ctx, req.(*UpdateItemRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeeperServiceV1_DeleteItemV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServiceV1Server).DeleteItemV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeeperServiceV1_DeleteItemV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServiceV1Server).DeleteItemV1(ctx, req.(*DeleteItemRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeeperServiceV1_GetItemV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServiceV1Server).GetItemV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeeperServiceV1_GetItemV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServiceV1Server).GetItemV1(ctx, req.(*GetItemRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeeperServiceV1_ListItemsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemsRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServiceV1Server).ListItemsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeeperServiceV1_ListItemsV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServiceV1Server).ListItemsV1(ctx, req.(*ListItemsRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// KeeperServiceV1_ServiceDesc is the grpc.ServiceDesc for KeeperServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeeperServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keeper.v1.KeeperServiceV1",
	HandlerType: (*KeeperServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItemV1",
			Handler:    _KeeperServiceV1_CreateItemV1_Handler,
		},
		{
			MethodName: "UpdateItemV1",
			Handler:    _KeeperServiceV1_UpdateItemV1_Handler,
		},
		{
			MethodName: "DeleteItemV1",
			Handler:    _KeeperServiceV1_DeleteItemV1_Handler,
		},
		{
			MethodName: "GetItemV1",
			Handler:    _KeeperServiceV1_GetItemV1_Handler,
		},
		{
			MethodName: "ListItemsV1",
			Handler:    _KeeperServiceV1_ListItemsV1_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateItemStreamV1",
			Handler:       _KeeperServiceV1_CreateItemStreamV1_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "keeper/v1/keeper.proto",
}
